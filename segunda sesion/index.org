#+TITLE: Python Language
#+SUBTITLE: 2da sesión
#+DATE: 2019/09/21（Sabado）19:00
#+AUTHOR: Albert Castellano Moreno
#+EMAIL: acastemoreno@gmail.com
#+OPTIONS: ':nil *:t -:t ::t <:t H:3 \n:nil ^:t arch:headline
#+OPTIONS: author:t c:nil creator:comment d:(not "LOGBOOK") date:t
#+OPTIONS: e:t email:nil f:t inline:t num:nil p:nil pri:nil stat:t
#+OPTIONS: tags:t tasks:t tex:t timestamp:t toc:nil todo:t |:t
#+CREATOR: Emacs 24.4.1 (Org mode 8.2.10)
#+DESCRIPTION:
#+EXCLUDE_TAGS: noexport
#+KEYWORDS:
#+LANGUAGE: es
#+SELECT_TAGS: export

#+TWITTER: acastemoreno

#+FAVICON: images/python-logo.png
#+ICON: images/python-logo.png

* Contenido 2da Sesión
- Expresiones regulares
    - Metacaracteres
    - Ejemplos
- Ambientes virtuales (virtualenv) y librerias
- Matplotlib

* Expresiones regulares
  :PROPERTIES:
  :SLIDE:    segue dark quote
  :ASIDE:    right bottom
  :ARTICLE:  flexbox vleft auto-fadein
  :END:

** Necesidad
Uno de los problemas más comunes en el desarrollo de cualquier programa informático, es el de procesamiento de texto. Tarea trivial para el ser humano, ya que nosotros podemos detectar con facilidad que es un número y que una letra, o cuales son palabras que cumplen con un determinado patrón y cuales no; pero estas mismas tareas no son tan fáciles para una computadora.

Luego de años de investigacion en el area de ciencias de la computación, se creo un lenguaje poderoso y versatil conocido como =expresiones regulares=.

** Expresiones regulares
Las *expresiones regulares*, a menudo llamada también regex, son unas *secuencias de caracteres* que forma un *patrón de búsqueda*, las cuales son formalizadas por medio de una *sintaxis específica*.

Los patrones se interpretan como un *conjunto de instrucciones*, que luego se ejecutan sobre un texto de entrada para *producir un subconjunto o una versión modificada del texto original*.

#+ATTR_HTML: :class note
#+BEGIN_QUOTE
Enlace[fn:1]
Enlace[fn:2]
Enlace[fn:3]
Enlace[fn:4]
#+END_QUOTE

** Componentes de expresiones regulares
Las expresiones regulares son un *mini lenguaje* en sí mismo, por lo que para poder utilizarlas eficientemente primero debemos entender los *componentes de su sintaxis*; ellos son:

- *Literales*: Cualquier caracter que se encuentra a sí mismo, a menos que se trate de un =metacaracter= con significado especial.
- *Clases de caracteres*: Se pueden especificar clases de caracteres encerrando una lista de caracteres entre corchetes [], la que encontrará cualquiera de los caracteres de la lista. Si el primer símbolo después del "[" es "^", la clase encuentra cualquier caracter que no está en la lista.

** Componentes de expresiones regulares
- *Secuencias de escape*: Finales de línea, tabs, barras diagonales, etc. Las principales secuencias de escape que podemos encontrar, son:

| Secuencia de escape | Significado            |
|---------------------+------------------------|
| =\n=                | Nueva línea (new line) |
| =\t=                | Tabulación             |
| =\\=                | Barra diagonal inversa |
| =\v=                | Tabulacion vertical    |

- *Metacaracteres*: Caracteres especiales que modifican enormemente los patrones creados.

* Metacaracteres
  :PROPERTIES:
  :SLIDE:    segue dark quote
  :ASIDE:    right bottom
  :ARTICLE:  flexbox vleft auto-fadein
  :END:

** Metacaracteres - delimitadores de busqueda
| Metacaracter | Significado                            |
|--------------+----------------------------------------|
| =^=          | inicio de línea                        |
| =$=          | fin de línea                           |
| =\A=         | inicio de texto                        |
| =\Z=         | fin de texto                           |
| =.=          | cualquier caracter en la línea         |
| =\b=         | encuentra límite de palabra            |
| =\B=         | encuentra distinto a límite de palabra |

** Metacaracteres - clases predefinidas
| Metacaracter | Significado                                  |
|--------------+----------------------------------------------|
| =\w=         | un caracter alfanumérico (incluye "_")       |
| =\W=         | un caracter no alfanumérico                  |
| =\d=         | un caracter numérico                         |
| =\D=         | un caracter no numérico                      |
| =\s=         | cualquier espacio (lo mismo que [ \t\n\r\f]) |
| =\S=         | un no espacio                                |

** Metacaracteres - iteradores (Numero de ocurrencias)
| Metacaracter | Significado                           |
|--------------+---------------------------------------|
| ={n}=        | exactamente n veces                   |
| ={n,}=       | por lo menos n veces                  |
| ={n,m}=      | por lo menos n pero no más de m veces |
| =*=          | cero o más, similar a {0,}            |
| =+=          | una o más, similar a {1,}             |
| =?=          | cero o una, similar a {0,1}           |

** Metacaracteres - alternativas
Se puede especificar una serie de alternativas para una plantilla usando "|" para separarlas.

La primera alternativa que coincide plenamente con la expresión analizada es la que se selecciona.

#+BEGIN_SRC regex
patrones:
   foo|foot
   foot|b
string:
    barefoot
#+END_SRC

** Python y Regex

#+BEGIN_SRC python
import re
pattern = r"foo|foot"
reobject = re.search(pattern)
result = reobject.match("barefoot")
#or
result = re.search(r"foo|foot", "barefoot")
#Primera forma más eficiente cuando queremos usar la expresion regular varias
#veces en el programa.
#+END_SRC

** Metodos =re=: Buscando coincidencias
- =match()=: El cual determinada si la regex tiene coincidencias en el comienzo del texto.
- =search()=: El cual escanea todo el texto buscando cualquier ubicación donde haya una coincidencia.
- =findall()=: El cual encuentra todos los subtextos donde haya una coincidencia y nos devuelve estas coincidencias como una lista.
- =finditer()=: El cual es similar al anterior pero en lugar de devolvernos una lista nos devuelve un iterador.


** Ejemplos
#+BEGIN_SRC python
# texto de entrada
patron = re.compile(r"foo")
texto = """ bar foo bar
foo barbarfoo
foofoo foo bar"""
print(patron.match(texto))

s = patron.search(texto)
s

##Continúa
#+END_SRC
** Ejemplos
#+BEGIN_SRC python
fa = patron.findall(texto)
fa

fi = patron.finditer(texto)
fi

next(fi)

next(fi)
#+END_SRC

** Metodos de las coincidencias
  :PROPERTIES:
  :ARTICLE:  smaller
  :END:
Cuando hay coincidencias, Python nos devuelve un *Objeto de Coincidencia* (salvo por el método =findall()= que devuelve una lista)

Este *Objeto de coincidencia también tiene sus *propios métodos* que nos proporcionan *información adicional* sobre la coincidencia; éstos métodos son:
- =group()=: El cual devuelve el texto que coincide con la expresion regular.
- =start()=: El cual devuelve la posición inicial de la coincidencia.
- =end()=: El cual devuelve la posición final de la coincidencia.
- =span()=: El cual devuelve una tupla con la posición inicial y final de la coincidencia.

#+BEGIN_SRC python
s.group(), s.start(), s.end(), s.span()
('foo', 5, 8, (5, 8))
#+END_SRC

** Metodos =re=: Modificando el texto de entrada
- =split()=: El cual divide el texto en una lista, realizando las divisiones del texto en cada lugar donde se cumple con la expresion regular.
- =sub()=: El cual encuentra todos los subtextos donde existe una coincidencia con la expresion regular y luego los reemplaza con un nuevo texto.
- =subn()=: El cual es similar al anterior pero además de devolver el nuevo texto, también devuelve el numero de reemplazos que realizó.

** Ejemplos

# texto de entrada
#+BEGIN_SRC python
becquer = """Podrá nublarse el sol eternamente; 
Podrá secarse en un instante el mar; 
Podrá romperse el eje de la tierra 
como un débil cristal. 
¡todo sucederá! Podrá la muerte 
cubrirme con su fúnebre crespón; 
Pero jamás en mí podrá apagarse 
la llama de tu amor."""
patron = re.compile(r"\W+")

palabras = patron.split(becquer)
palabras[:10]  # 10 primeras palabras

patron.split(becquer, 5)  # 5: Tope de divisiones
#+END_SRC

** Ejemplos
#+BEGIN_SRC python
# Cambiando "Podrá" o "podra" por "Puede"
podra = re.compile(r"(P|p)odrá")
puede = podra.sub("Puede", becquer)
print(puede)

puede = podra.sub("Puede", becquer, 2)
print(puede)
#+END_SRC

** Nombrando los grupos
#+BEGIN_SRC python
# Accediendo a los grupos por sus indices
patron = re.compile(r"(\w+) (\w+)")
s = patron.search("Raul Lopez")

s.group(1)

s.group(2)

# Accediendo a los grupos por nombres
patron = re.compile(r"(?P<nombre>\w+) (?P<apellido>\w+)")
s = patron.search("Raul Lopez")

s.group("nombre")

s.group("apellido")
#+END_SRC

* Virtualenv
  :PROPERTIES:
  :SLIDE:    segue dark quote
  :ASIDE:    right bottom
  :ARTICLE:  flexbox vleft auto-fadein
  :END:

** Virtualenv
=Virtualenv= es una herramienta usada para crear un ambiente Python aislado. Este ambiente tiene su propio directorio de instalación que no comparte librerías con otros ambientes virtualenv (y opcionalmente acceder las librerías globales instaladas via --system-site-package).

#+BEGIN_SRC shell
$ pip3 install virtualenv

#Nos ubicamos en la carpeta donde queremos tener nuestro ambiente, luego:
$ virtualenv env --python=python3
$ cd env
#+END_SRC

#+ATTR_HTML: :class note
#+BEGIN_QUOTE
Enlace[fn:5]
#+END_QUOTE

** Estructura de la carpeta =env=

#+BEGIN_SRC shell
env/
  bin/
  include/
  lib/
    pythonx.x/
      site-packages/
#+END_SRC
- =bin/=: Contiene los los ejecutables necesarios para interactuar con el entorno virtual
- =include/=: Contiene algunos archivos C (cuya extensión es *.h) necesarios para compilar algunas librerías de Python.
- =lib/=: Contiene una copia de la instalación de Python y un directorio =site-packages/= donde se almacenan los paquetes python instalados en el entorno virtual.

** Uso de ambiente virtual
#+BEGIN_SRC shell
#estando ubicados en la carpeta <b>env</b>
#carpeta creada por el comando <b>virtualenv env --python=python3</b>
$ source bin/activate
(env)$
(env)$ pip install Django
(env)$ deactivate
$
#+END_SRC

* Matplotlib
  :PROPERTIES:
  :SLIDE:    segue dark quote
  :ASIDE:    right bottom
  :ARTICLE:  flexbox vleft auto-fadein
  :END:

** Pasos previos
#+BEGIN_SRC shell
$ pip install matplotlib numpy --user 
#+END_SRC

#+BEGIN_SRC python
import matplotlib.pyplot as plt
#+END_SRC

** 
:PROPERTIES:
:FILL:     images/anatomy-matplotlib.png
:TITLE:    white
:SLIDE:    white
:END:

** Plot, Axis
#+BEGIN_SRC python
#Plotear con el eje x con los valores por defecto [0,1,2,3]
plt.plot([1, 2, 3, 4])
plt.ylabel('some numbers')
plt.show()

#Plotear con valores x,y
plt.plot([1, 2, 3, 4], [1, 4, 9, 16])
plt.show()
#+END_SRC

#+ATTR_HTML: :class note
#+BEGIN_QUOTE
Enlace[fn:6]
Enlace[fn:7]
#+END_QUOTE

** Formato basico, numpy, multiples series
#+BEGIN_SRC python
# Formado de linea
plt.plot([1, 2, 3, 4], [1, 4, 9, 16], 'ro')
plt.plot([1, 2, 3, 4], [1, 4, 9, 16], color='red', marker='o')
plt.axis([0, 6, 0, 20])
plt.show()

import numpy as np
#tiempo de muestreo uniforme a intervalos de 200 ms de 0 a 5
t = np.arange(0, 5, 0.2)
#guiones rojos, cuadrados azules y triángulos verdes
plt.plot(t, t, 'r--', t, t**2, 'bs', t, t**3, 'g^')
plt.show()
#+END_SRC

#+ATTR_HTML: :class note
#+BEGIN_QUOTE
Enlace[fn:8]
Enlace[fn:9]
Enlace[fn:10]
#+END_QUOTE

** Mapas y Graficos de dispersion
#+BEGIN_SRC python
#Data randon con grafico de dispersion
data = {'a': np.arange(50),
        'c': np.random.randint(0, 50, 50),
        'd': np.random.randn(50)}
data['b'] = data['a'] + 10 * np.random.randn(50)
data['d'] = np.abs(data['d']) * 100
plt.scatter('a', 'b', c='c', s='d', data=data) #a es x, b es y, c es color, d es la escala
plt.xlabel('entry a')
plt.ylabel('entry b')
plt.show()
#+END_SRC

#+ATTR_HTML: :class note
#+BEGIN_QUOTE
Enlace[fn:11]
Enlace[fn:12]
Enlace[fn:13]
#+END_QUOTE

** Multiples figuras y ejes
#+BEGIN_SRC python
def f(t):
    return np.exp(-t) * np.cos(2*np.pi*t)

t1 = np.arange(0, 5, 0.1)
t2 = np.arange(0, 5, 0.02)

plt.figure()
plt.subplot(211)
plt.plot(t1, f(t1), 'bo', t2, f(t2), 'k')

plt.subplot(212)
plt.plot(t2, np.cos(2*np.pi*t2), 'r--')
plt.show()
#+END_SRC

#+ATTR_HTML: :class note
#+BEGIN_QUOTE
Enlace[fn:15]
Enlace[fn:14]
#+END_QUOTE

* Gracias
:PROPERTIES:
:SLIDE: thank-you-slide segue
:ASIDE: right
:ARTICLE: flexbox vleft auto-fadein
:END:

* Footnotes
[fn:1] [[https://regex101.com/][Regex Online - Recomendado]]
[fn:2] [[https://docs.python.org/3/library/re.html][Regular expression operations - Python Documentation]]
[fn:3] [[https://medium.com/@jmz12/expresiones-regulares-215af64acab1][Holy or Evil: Expresiones Regulares]]
[fn:4] [[https://platzi.com/blog/expresiones-regulares-python/][Guía de expresiones regulares en Python - Platzi]]
[fn:5] [[https://virtualenv.pypa.io/en/latest/][Documentación Virtualenv]]
[fn:6] [[https://matplotlib.org/api/_as_gen/matplotlib.pyplot.plot.html#matplotlib.pyplot.plot][Matploplib metodo plot]]
[fn:7] [[https://matplotlib.org/api/_as_gen/matplotlib.pyplot.axis.html#matplotlib.pyplot.axis][Matploplib metodo axis]]
[fn:8] [[https://matplotlib.org/api/_as_gen/matplotlib.pyplot.scatter.html#matplotlib.pyplot.scatter][Matploplib metodo scatter]]
[fn:9] [[https://matplotlib.org/api/_as_gen/matplotlib.pyplot.xlabel.html#matplotlib.pyplot.xlabel][Matploplib metodo xlabel]]
[fn:10] [[https://matplotlib.org/api/_as_gen/matplotlib.pyplot.ylabel.html#matplotlib.pyplot.ylabel][Matploplib metodo ylabel]]
[fn:11] [[https://docs.scipy.org/doc/numpy/reference/generated/numpy.arange.html#numpy.arange][Numpy arange]]
[fn:12] [[https://docs.scipy.org/doc/numpy/reference/random/generated/numpy.random.mtrand.RandomState.randint.html#numpy.random.mtrand.RandomState.randint][Numpy random integer]]
[fn:13] [[https://docs.scipy.org/doc/numpy/reference/random/generated/numpy.random.mtrand.RandomState.randn.html#numpy.random.mtrand.RandomState.randn][Numpy random distibucion standard]]
[fn:14] [[https://matplotlib.org/api/_as_gen/matplotlib.pyplot.subplot.html#matplotlib.pyplot.subplot][Matploplib subplot]]
[fn:15] [[https://matplotlib.org/api/_as_gen/matplotlib.pyplot.figure.html#matplotlib.pyplot.figure][Matploplib figure]]