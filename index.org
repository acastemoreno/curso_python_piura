#+TITLE: Python Language
#+SUBTITLE: Fundamentos para Machine Learning
#+DATE: 2019/09/21（Sabado）19:00
#+AUTHOR: Albert Castellano Moreno
#+EMAIL: acastemoreno@gmail.com
#+OPTIONS: ':nil *:t -:t ::t <:t H:3 \n:nil ^:t arch:headline
#+OPTIONS: author:t c:nil creator:comment d:(not "LOGBOOK") date:t
#+OPTIONS: e:t email:nil f:t inline:t num:nil p:nil pri:nil stat:t
#+OPTIONS: tags:t tasks:t tex:t timestamp:t toc:nil todo:t |:t
#+CREATOR: Emacs 24.4.1 (Org mode 8.2.10)
#+DESCRIPTION:
#+EXCLUDE_TAGS: noexport
#+KEYWORDS:
#+LANGUAGE: es
#+SELECT_TAGS: export

#+TWITTER: acastemoreno

#+FAVICON: images/python-logo.png
#+ICON: images/python-logo.png

* Contenido
- Jupyter Notebook y Google Colaboratory.
- Python 2 vs 3
- Funciones y Programación estructurada
- Módulos, paquetes y distribucion de software
- Programación orientada a objetos.
- Manipulación de listas
- Diccionarios
- Expresiones regulares
- Archivos
- Cadenas, listas y diccionarios

* Jupyter Notebook y Google Colaboratory
  :PROPERTIES:
  :SLIDE:    segue dark quote
  :ASIDE:    right bottom
  :ARTICLE:  flexbox vleft auto-fadein
  :END:

** Jupyter Notebook
:PROPERTIES:
:ARTICLE:  smaller
:END:
Como aplicación web *local*, Jupyter Notebook permite *escribir y ejecutar codigo desde un navegador web*. Los principales lenguajes que soporta son *Julia*, *Python*, y *R*.
#+BEGIN_CENTER
#+ATTR_HTML: :width 500px
[[file:images/jupyter_screens.png]]
#+END_CENTER

** Instalación (Windows)
- Instalar [[https://nodejs.org/es/download/][Nodejs]]
- Instalar [[https://www.python.org/downloads/][Python]], versiones 2.7.16 y 3.7.4 (marcar las opciones =add to path= y =to all users=)
- Ejecutar los siguientes comandos en consola

#+BEGIN_SRC sh
#Procedimiento valido solo para usuarios Windows
$ python -m pip install --upgrade pip
$ pip -m install jupyterlab
$ python -m pip install jupyter
$ py -2 -m pip install ipykernel
$ py -3 -m pip install ipykernel
$ py -2 -m ipykernel install --user
$ py -3 -m ipykernel install --user
#+END_SRC

** 
Ejecutar el comando =jupyter lab= iniciará la aplicacion web jupyterlab y se abrira una pestaña en el navegador web.
#+BEGIN_CENTER
#+ATTR_HTML: :width 600px
[[file:images/verify_install.png]]
#+END_CENTER

** Google Colaboratory
[[https://colab.research.google.com/][Google Colaboratory]] es un entorno gratuito de Jupiter Notebook que =no requiere configuración=.

Permite escribir y ejecutar código, *guardar y compartir análisis* desde un navegador web.

La gran ventaje de este entorno es el soporte de Google y la integración con google Drive.

* Python 2 vs Python 3
  :PROPERTIES:
  :SLIDE:    segue dark quote
  :ASIDE:    right bottom
  :ARTICLE:  flexbox vleft auto-fadein
  :END:

** Diferencias
| Comparacion                | Python2                    | Python3                  |
|----------------------------+----------------------------+--------------------------|
| Tipo de proyecto           | Legacy                     | Moderno                  |
| Funcion =print=            | print "hello"              | print("hello")           |
| Division de enteros        | 5/2=2 (5.0/2.0=2.5)        | 5/2=2.5                  |
| Codificacion de caracteres | ASCII                      | Unicode                  |
| Input user                 | =input()=  y =raw_input()= | =input()=                |
| Librerias                  | Incompatible con Python3   | Incompatible con Python2 |
|----------------------------+----------------------------+--------------------------|

#+Attr_HTML: :class note
#+BEGIN_QUOTE
Link1.[fn:1]
Link2.[fn:2]
#+END_QUOTE

* Funciones y Programación estructurada
  :PROPERTIES:
  :SLIDE:    segue dark quote
  :ASIDE:    right bottom
  :ARTICLE:  flexbox vleft auto-fadein
  :END:

** Programación estructurada
Se basa en el uso de =funciones=, =subrutinas= y las siguientes tres estructuras de control:
- *Secuencia*: ejecución de una sentencia tras otra.
- *Selección o condicional*: ejecución de una sentencia o conjunto de sentencias, según el valor de una variable booleana.
- *Iteración (ciclo o bucle)*: ejecución de una sentencia o conjunto de sentencias, mientras una variable booleana sea verdadera.

** Funciones
Una función es un bloque de código con un nombre asociado, que recibe cero o más argumentos como entrada, sigue una secuencia de sentencias y devuelve un valor.

#+BEGIN_CENTER
#+ATTR_HTML: :width 250px
[[file:images/funcion.png]]
#+END_CENTER

** Utilidad 
- *Modularización*: permite segmentar un programa complejo en una serie de partes o módulos más simples, facilitando así la programación y el depurado.
- *Reutilización*: permite reutilizar una misma función en distintos lugares.

** Creando funciones
:PROPERTIES:
:ARTICLE:  smaller
:END:
#+BEGIN_SRC python
def NOMBRE(LISTA_DE_PARAMETROS):
    """DOCSTRING_DE_FUNCION"""
    SENTENCIAS
    RETURN [EXPRESION]
#+END_SRC

- =NOMBRE=, es el nombre de la función.
- =LISTA_DE_PARAMETROS=, es la lista de parámetros que puede recibir una función.
- =DOCSTRING_DE_FUNCION=, es la cadena de caracteres usada para documentar la función.
- =SENTENCIAS=, es el bloque de sentencias en código fuente Python que realizar cierta operación dada.
- =RETURN=, es la sentencia return en código Python.
- =EXPRESION=, es la expresión o variable que devuelve la sentencia return.

** Ejemplos
:PROPERTIES:
:ARTICLE:  smaller
:END:
#+BEGIN_SRC python
>>> def hola(arg):
...   """El docstring de la función"""
...   print("Hello " , arg , " !")
>>>
>>> hola("World")
Hello World
#+END_SRC
#+ATTR_HTML: :target _blank
#+BEGIN_SRC python
# -*- coding: utf-8 -*-
def hello(arg):
    """El docstring de la funcion"""
    print("Hello", arg, "!")
$ python
>>> import hello
>>> hello.hello("World")
Hello World
#+END_SRC
- Las sentencias deben estar indentados.
- Por defecto las funciones retornan el valor =None=

#+ATTR_HTML: :class note
#+BEGIN_QUOTE
Enlace a codigo.[fn:3]
#+END_QUOTE

** Funciones, Argumentos y parametros
:PROPERTIES:
:ARTICLE:  smaller
:END:
#+BEGIN_SRC python
>>> def resta(a, b):
...     return a - b
...
>>> resta(30, 10)
20
#+END_SRC

#+BEGIN_SRC python
>>> def resta(a, b):
...     return a - b
...
>>> (b=30, a=10)
-20
#+END_SRC

** Funciones recursivas
:PROPERTIES:
:ARTICLE:  smaller
:END:
Las funciones recursivas son funciones que se llaman a sí mismas durante su propia ejecución. Ellas funcionan de forma similar a las iteraciones, pero debe encargarse de planificar el momento en que dejan de llamarse a sí mismas o tendrá una función.

#+BEGIN_CENTER
#+ATTR_HTML: :width 600px
[[file:images/recursion.png]]
#+END_CENTER

** Ejemplos
:PROPERTIES:
:ARTICLE:  smaller
:END:
#+BEGIN_SRC python
# -*- coding: utf-8 -*-
def cuenta_regresiva(numero):
    numero -= 1
    if numero > 0:
        print(numero)
        cuenta_regresiva(numero)
    else:
        print("Boooooooom!")
    print("Fin de la función" + str(numero))

def factorial(numero):
    print("Valor inicial ->",numero)
    if numero > 1:
        numero = numero * factorial(numero -1)
    print("valor final ->" + str(numero))
    return numero

>>> recursiva.cuenta_regresiva("World")
>>> recursiva.factorial(100)
#+END_SRC

#+ATTR_HTML: :class note
#+BEGIN_QUOTE
Enlace a codigo.[fn:4]
#+END_QUOTE

** Funciones anónimas
:PROPERTIES:
:ARTICLE:  smaller
:END:
Una función anónima, como su nombre indica, es una función sin nombre. La unica manera para usar estass funciones es primero guardandolas en una variable.

*El contenido de una función anónima debe ser una única expresión en lugar de un bloque de acciones.*
#+BEGIN_SRC python
>>> def doble(numero): return numero*2
... 
>>> doble(2)
4
#+END_SRC

#+BEGIN_SRC python
>>> doble = lambda numero: numero*2
>>> doble(2)
4
#+END_SRC

* Gracias
:PROPERTIES:
:SLIDE: thank-you-slide segue
:ASIDE: right
:ARTICLE: flexbox vleft auto-fadein
:END:

* Footnotes
[fn:1] [[https://www.pythonmania.net/es/2016/02/29/las-principales-diferencias-entre-python-2-y-3-con-ejemplos/][Las principales diferencias entre python 2 y 3 con ejemplos]]
[fn:2] [[https://www.guru99.com/python-2-vs-python-3.html][Python 2 vs Python 3: Key Differences]]
[fn:3] Codigo fuente [[file:ejemplos/hello.py][hello.py]]
[fn:4] Codigo fuente [[file:ejemplos/recursiva.py][recursiva.py]]
