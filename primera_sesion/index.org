#+TITLE: Python Language
#+SUBTITLE: Fundamentos para Machine Learning
#+DATE: 2019/09/21（Sabado）19:00
#+AUTHOR: Albert Castellano Moreno
#+EMAIL: acastemoreno@gmail.com
#+OPTIONS: ':nil *:t -:t ::t <:t H:3 \n:nil ^:t arch:headline
#+OPTIONS: author:t c:nil creator:comment d:(not "LOGBOOK") date:t
#+OPTIONS: e:t email:nil f:t inline:t num:nil p:nil pri:nil stat:t
#+OPTIONS: tags:t tasks:t tex:t timestamp:t toc:nil todo:t |:t
#+CREATOR: Emacs 24.4.1 (Org mode 8.2.10)
#+DESCRIPTION:
#+EXCLUDE_TAGS: noexport
#+KEYWORDS:
#+LANGUAGE: es
#+SELECT_TAGS: export

#+TWITTER: acastemoreno

#+FAVICON: images/python-logo.png
#+ICON: images/python-logo.png

* Contenido 1era Sesión
- Jupyter Notebook y Google Colaboratory.
- Python 2 vs 3
- Tipos basicos
  - Numeros
  - Cadena de caracteres
  - Listas
  - Diccionarios
- Programación estructurada
  - Estructuras de control
  - Funciones
- Programación orientada a objetos
* Contenido 2da Sesión
- Expresiones regulares
- Ambientes virtuales (virtualenv) y librerias
- Uso basico de numpy
- Uso basico de matplotlib

* Jupyter Notebook y Google Colaboratory
  :PROPERTIES:
  :SLIDE:    segue dark quote
  :ASIDE:    right bottom
  :ARTICLE:  flexbox vleft auto-fadein
  :END:

** Jupyter Notebook
:PROPERTIES:
:ARTICLE:  smaller
:END:
Como aplicación web *local*, Jupyter Notebook permite *escribir y ejecutar codigo desde un navegador web*. Los principales lenguajes que soporta son *Julia*, *Python*, y *R*.
#+BEGIN_CENTER
#+ATTR_HTML: :width 500px
[[file:images/jupyter_screens.png]]
#+END_CENTER

** Instalación (Windows)
- Instalar [[https://nodejs.org/es/download/][Nodejs]]
- Instalar [[https://www.python.org/downloads/][Python]], versiones 2.7.16 y 3.7.4 (marcar las opciones =add to path= y =to all users=)
- Ejecutar los siguientes comandos en consola

#+BEGIN_SRC sh
#Procedimiento valido solo para usuarios Windows
$ python -m pip install --upgrade pip
$ pip -m install jupyterlab
$ python -m pip install jupyter
$ py -2 -m pip install ipykernel
$ py -3 -m pip install ipykernel
$ py -2 -m ipykernel install --user
$ py -3 -m ipykernel install --user
#+END_SRC

** 
Ejecutar el comando =jupyter lab= iniciará la aplicacion web jupyterlab y se abrira una pestaña en el navegador web.
#+BEGIN_CENTER
#+ATTR_HTML: :width 600px
[[file:images/verify_install.png]]
#+END_CENTER

** Google Colaboratory
[[https://colab.research.google.com/][Google Colaboratory]] es un entorno gratuito de Jupiter Notebook que =no requiere configuración=.

Permite escribir y ejecutar código, *guardar y compartir análisis* desde un navegador web.

La gran ventaje de este entorno es el soporte de Google y la integración con google Drive.

* Python 2 vs Python 3
  :PROPERTIES:
  :SLIDE:    segue dark quote
  :ASIDE:    right bottom
  :ARTICLE:  flexbox vleft auto-fadein
  :END:

** Diferencias
| Comparacion                | Python2                    | Python3                  |
|----------------------------+----------------------------+--------------------------|
| Tipo de proyecto           | Legacy                     | Moderno                  |
| Funcion =print=            | print "hello"              | print("hello")           |
| Division de enteros        | 5/2=2 (5.0/2.0=2.5)        | 5/2=2.5                  |
| Codificacion de caracteres | ASCII                      | Unicode                  |
| Input user                 | =input()=  y =raw_input()= | =input()=                |
| Librerias                  | Incompatible con Python3   | Incompatible con Python2 |
|----------------------------+----------------------------+--------------------------|

#+Attr_HTML: :class note
#+BEGIN_QUOTE
Link1.[fn:1]
Link2.[fn:2]
#+END_QUOTE

* Tipos basicos
  :PROPERTIES:
  :SLIDE:    segue dark quote
  :ASIDE:    right bottom
  :ARTICLE:  flexbox vleft auto-fadein
  :END:

* Numeros
#+BEGIN_SRC python
>>> 2 + 2
4
>>> 50 - 5*6
20
>>> (50 - 5*6) / 4
5.0
>>> 8 / 5  # la división simpre retorna un número de punto flotante
1.6
>>> 17 // 3  # la división entera descarta la parte fraccional
5
>>> 17 % 3  # el operado % retorna el resto de la división
2
>>> 2 ** 7  # 2 a la potencia de 7
128
#+END_SRC

#+Attr_HTML: :class note
#+BEGIN_QUOTE
Link1.[fn:3]
Link1.[fn:4]
#+END_QUOTE


* Cadena de caracteres
  :PROPERTIES:
  :SLIDE:    segue dark quote
  :ASIDE:    right bottom
  :ARTICLE:  flexbox vleft auto-fadein
  :END:

** Cadena de caracteres
  :PROPERTIES:
  :ARTICLE:  smaller
  :END:
#+BEGIN_SRC python
>>> 'doesn\'t'  # usa \' para escapar comillas simples...
"doesn't"
>>> "doesn't"  # ...o de lo contrario usa comillas doblas
"doesn't"
>>> '"Si," le dijo.'
'"Si," le dijo.'
>>> "\"Si,\" le dijo."
'"Si," le dijo.'
>>> s = 'Primera línea.\nSegunda línea.'  # \n significa nueva línea
>>> s  # sin print(), \n es incluído en la salida
'Primera línea.\nSegunda línea.'
>>> print(s)  # con print(), \n produce una nueva línea
Primera línea.
Segunda línea.
#+END_SRC

#+Attr_HTML: :class note
#+BEGIN_QUOTE
Link1.[fn:5]
Link2.[fn:6]
#+END_QUOTE

* Listas
  :PROPERTIES:
  :SLIDE:    segue dark quote
  :ASIDE:    right bottom
  :ARTICLE:  flexbox vleft auto-fadein
  :END:

** Listas
Python tiene varios tipos de datos compuestos, usados para agrupar otros valores. El más versátil es la lista, la cual puede ser escrita como una lista de valores separados por coma (ítems) entre corchetes.

#+BEGIN_SRC python
>>> cuadrados = [1, 4, 9, 16, 25]
>>> cuadrados
[1, 4, 9, 16, 25]
#+END_SRC

#+Attr_HTML: :class note
#+BEGIN_QUOTE
Link1.[fn:7]
#+END_QUOTE

** Listas: Operaciones inmutables
#+BEGIN_SRC python
>>> cuadrados = [1, 4, 9, 16, 25]
>>> cuadrados[0]  # seleccionando un elemento por su index
1
>>> cuadrados[-1]
25
>>> cuadrados[-3:]  # nueva lista segun rango
[9, 16, 25]
>>> cuadrados + [36, 49, 64, 81, 100]  # Concatenados
[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]
#+END_SRC

** Listas: Operaciones Mutables
#+BEGIN_SRC python
>>> cubos = [1, 8, 27, 65, 125]
>>> 4 ** 3  # el cubo de 4 es 64, no 65!
64
>>> cubos[3] = 64  # reemplazar el valor incorrecto
>>> cubos
[1, 8, 27, 64, 125]
>>> cubos.append(216)  # agregar el cubo de 6
>>> cubos.append(7 ** 3)  # y el cubo de 7
>>> cubos
[1, 8, 27, 64, 125, 216, 343]
#+END_SRC

#+Attr_HTML: :class note
#+BEGIN_QUOTE
Link1.[fn:8]
#+END_QUOTE

* Diccionarios
  :PROPERTIES:
  :SLIDE:    segue dark quote
  :ASIDE:    right bottom
  :ARTICLE:  flexbox vleft auto-fadein
  :END:

** Diccionarios
Los diccionarios son estructuras de datos que identifican a sus elementos (no ordenados) mediante una llave unica dentro del diccionario en particular.

#+BEGIN_SRC python
>>> diccionario = {'nombre' : 'Albert', 'apellido' : 'Castellano', 'edad' : 27 }
>>> diccionario['nombre']
'Albert'
>>> diccionario['edad']
26
>>> diccionario['apellido']
'Castellano'
#+END_SRC

#+Attr_HTML: :class note
#+BEGIN_QUOTE
Link1.[fn:12]
#+END_QUOTE

** Diccionarios: Operaciones

#+BEGIN_SRC python
>>> dict = dict([('sape', 4139), ('guido', 4127), ('jack', 4098)])
>>> dict['guido']
4127
>>> versiones = {'python': 2.7, 'zope': 2.13, 'plone': None}
>>> versiones['plone'] = 5.1
>>> versiones
{'python': 2.7, 'zope': 2.13, 'plone': 5.1}
>>> versiones['plone']
5.1
#+END_SRC

* Programación estructurada
  :PROPERTIES:
  :SLIDE:    segue dark quote
  :ASIDE:    right bottom
  :ARTICLE:  flexbox vleft auto-fadein
  :END:

** Programación estructurada
Se basa en el uso de =funciones=, =subrutinas= y las siguientes tres estructuras de control:
- *Secuencia*: ejecución de una sentencia tras otra.
- *Selección o condicional*: ejecución de una sentencia o conjunto de sentencias, según el valor de una variable booleana.
- *Iteración (ciclo o bucle)*: ejecución de una sentencia o conjunto de sentencias, mientras una variable booleana sea verdadera.

* Estructuras de control
  :PROPERTIES:
  :SLIDE:    segue dark quote
  :ASIDE:    right bottom
  :ARTICLE:  flexbox vleft auto-fadein
  :END:

** Condicional if
#+BEGIN_SRC python
numero = int(input("\nIngresa un número entero, por favor: "))

if numero < 0:
    numero = 0
    print('El número ingresado es negativo cambiado a cero.\n')
elif numero == 0:
    print('El número ingresado es 0.\n')
elif numero == 1:
    print('El número ingresado es 1.\n')
else:
    print('El número ingresado es mayor que uno.\n')
#+END_SRC

** Bucle while
#+BEGIN_SRC python
promedio, total, contar = 0.0, 0, 0
print("Introduzca la nota de un estudiante (-1 para salir): ")
grado = int(input())	
while grado != -1:
    total = total + grado
    contar = contar + 1
    print("Introduzca la nota de un estudiante (-1 para salir): ")
    grado = int(input())
print("La suma de notas es: " + str(total))
promedio = total / contar
print("Promedio de notas del grado escolar es: " + str(promedio))
#+END_SRC

** Bucle for
#+BEGIN_SRC python
db_connection = "127.0.0.1","5432","root","nomina"
for parametro in db_connection:
    print parametro
else:
    print("""El comando PostgreSQL es: 
$ psql -h {server} -p {port} -U {user} -d {db_name}""".format(
        server=db_connection[0], port=db_connection[1], 
        user=db_connection[2], db_name=db_connection[3]))
#+END_SRC

* Funciones
  :PROPERTIES:
  :SLIDE:    segue dark quote
  :ASIDE:    right bottom
  :ARTICLE:  flexbox vleft auto-fadein
  :END:

** Funciones
Una función es un bloque de código con un nombre asociado, que recibe cero o más argumentos como entrada, sigue una secuencia de sentencias y devuelve un valor.

#+BEGIN_CENTER
#+ATTR_HTML: :width 250px
[[file:images/funcion.png]]
#+END_CENTER

#+Attr_HTML: :class note
#+BEGIN_QUOTE
Enlaces[fn:9]
#+END_QUOTE

** Utilidad 
- *Modularización*: permite segmentar un programa complejo en una serie de partes o módulos más simples, facilitando así la programación y el depurado.
- *Reutilización*: permite reutilizar una misma función en distintos lugares.

** Creando funciones
  :PROPERTIES:
  :ARTICLE:  smaller
  :END:
#+BEGIN_SRC python
def NOMBRE(LISTA_DE_PARAMETROS):
    """DOCSTRING_DE_FUNCION"""
    SENTENCIAS
    RETURN [EXPRESION]
#+END_SRC

- =NOMBRE=, es el nombre de la función.
- =LISTA_DE_PARAMETROS=, es la lista de parámetros que puede recibir una función.
- =DOCSTRING_DE_FUNCION=, es la cadena de caracteres usada para documentar la función.
- =SENTENCIAS=, es el bloque de sentencias en código fuente Python que realizar cierta operación dada.
- =RETURN=, es la sentencia return en código Python.
- =EXPRESION=, es la expresión o variable que devuelve la sentencia return.

** Ejemplo
#+BEGIN_SRC python
>>> def hello(arg):
...   """El docstring de la función"""
...   print("Hello " , arg , " !")
>>>
>>> hello("World")
Hello World
#+END_SRC
- Las sentencias deben estar indentadas.
- Por defecto las funciones retornan el valor =None=

** Funciones, Argumentos y parametros
:PROPERTIES:
:ARTICLE:  smaller
:END:
#+BEGIN_SRC python
>>> def resta(a, b):
...     return a - b
...
>>> resta(30, 10)
20
#+END_SRC

#+BEGIN_SRC python
>>> def resta(a, b):
...     return a - b
...
>>> resta(b=30, a=10)
-20
#+END_SRC

** Funciones recursivas
:PROPERTIES:
:ARTICLE:  smaller
:END:
Las funciones recursivas son funciones que se llaman a sí mismas durante su propia ejecución. Ellas funcionan de forma similar a las iteraciones, pero debe encargarse de planificar el momento en que dejan de llamarse a sí mismas o tendrá una función.

#+BEGIN_CENTER
#+ATTR_HTML: :width 600px
[[file:images/recursion.png]]
#+END_CENTER

** Ejemplos
:PROPERTIES:
:ARTICLE:  smaller
:END:
#+BEGIN_SRC python
# -*- coding: utf-8 -*-
def cuenta_regresiva(numero):
    numero -= 1
    if numero > 0:
        print(numero)
        cuenta_regresiva(numero)
    else:
        print("Boooooooom!")
    print("Fin de la función" + str(numero))

def factorial(numero):
    print("Valor inicial ->",numero)
    if numero > 1:
        numero = numero * factorial(numero -1)
    print("valor final ->" + str(numero))
    return numero

>>> recursiva.cuenta_regresiva("World")
>>> recursiva.factorial(100)
#+END_SRC

** Funciones anónimas
  :PROPERTIES:
  :ARTICLE:  smaller
  :END:
Una función anónima, como su nombre indica, es una función sin nombre. La unica manera para usar estas funciones es primero guardandolas en una variable.

*El contenido de una función anónima debe ser una única expresión en lugar de un bloque de acciones.*
#+BEGIN_SRC python
>>> def doble(numero): return numero*2
... 
>>> doble(2)
4
#+END_SRC

#+BEGIN_SRC python
>>> doble = lambda numero: numero*2
>>> doble(2)
4
#+END_SRC

** Funciones de orden superior
Las funciones de orden superior son funciones que pueden recibir como parámetros otras funciones y/o devolverlas como resultados.

Las funciones de orden superior más usadas son las siguientes.
- filter
- map
- reduce

#+ATTR_HTML: :class note
#+BEGIN_QUOTE
Enlaces[fn:10]
Enlaces[fn:11]
#+END_QUOTE

** Funciones de orden superior
  :PROPERTIES:
  :ARTICLE:  smaller
  :END:
#+BEGIN_SRC python
>>> numeros = [2, 5, 10, 23, 50, 33]
>>> filter(lambda numero: numero%5 == 0, numeros)
[5, 10, 50]

>>> map(lambda x: x*2, numeros)
[4, 10, 20, 46, 100, 66]
>>> a = [1, 2, 3, 4, 5]
>>> b = [6, 7, 8, 9, 10]
>>> map(lambda x,y : x*y, a,b)
[6, 14, 24, 36, 50]

>>> from functools import reduce
>>> reduce(lambda x,y : x*y, [1, 2, 3, 4], 1) #lambda, iterable , valor inicial
#+END_SRC


** Ejercicios
- [[https://www.codewars.com/kata/54bf1c2cd5b56cc47f0007a1/train/python][Codewars - Counting Duplicates]]
- [[https://www.codewars.com/kata/54edbc7200b811e956000556/train/python][Codewars - Counting sheep...]]
- [[https://www.codewars.com/kata/5a3fe3dde1ce0e8ed6000097/train/python][Codewars - Century From Year]]
- [[https://www.codewars.com/kata/53369039d7ab3ac506000467/train/python][Codewars - Convert boolean values to strings 'Yes' or 'No'.]]
- [[https://www.codewars.com/kata/5513795bd3fafb56c200049e/train/python][Codewars - Count by X]]


* Gracias
:PROPERTIES:
:SLIDE: thank-you-slide segue
:ASIDE: right
:ARTICLE: flexbox vleft auto-fadein
:END:

* Footnotes
[fn:1] [[https://www.pythonmania.net/es/2016/02/29/las-principales-diferencias-entre-python-2-y-3-con-ejemplos/][Las principales diferencias entre python 2 y 3 con ejemplos]]
[fn:2] [[https://www.guru99.com/python-2-vs-python-3.html][Python 2 vs Python 3: Key Differences]]
[fn:3] [[https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex][Numeric Types]]
[fn:4] [[https://docs.python.org/3/library/numeric.html][Numeric and Mathematical Modules]]
[fn:5] [[https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str][Text Sequence Type — str]]
[fn:6] [[https://docs.python.org/3/library/string.html][string — Common string operations]]
[fn:7] [[https://docs.python.org/3/library/stdtypes.html#sequence-types-list-tuple-range][Sequence Types — list, tuple, range]]
[fn:8] [[https://docs.python.org/3/tutorial/datastructures.html#more-on-lists][More on Lists - Python Documentation]]
[fn:9] [[https://docs.python.org/3/library/functions.html#built-in-functions][Built-in Functions]]
[fn:10] [[https://docs.python.org/3/howto/functional.html#built-in-functions][How to functional]]
[fn:11] [[https://docs.python.org/3/library/itertools.html#module-itertools][Modulo itertools]]
[fn:12] [[https://docs.python.org/3/library/stdtypes.html#typesmapping][Mapping Types — dict]]
